<?php

declare(strict_types=1);

namespace PhoneBurner\SaltLite\Framework\Util\Cryptography\Symmetric;

use PhoneBurner\SaltLite\Framework\Util\Cryptography\Attribute\AlgorithmImplementation;
use PhoneBurner\SaltLite\Framework\Util\Cryptography\Symmetric\Algorithm\Aes256Gcm;
use PhoneBurner\SaltLite\Framework\Util\Cryptography\Symmetric\Algorithm\XChaCha20Blake2b;
use PhoneBurner\SaltLite\Framework\Util\Cryptography\Symmetric\Algorithm\XChaCha20Poly1305;
use PhoneBurner\SaltLite\Framework\Util\Cryptography\Symmetric\Algorithm\XSalsa20Poly1305;
use PhoneBurner\SaltLite\Framework\Util\Helper\CaseAttr;

enum Algorithm
{
    /**
     * XChaCha20-BLAKE2b is a AEAD construction which uses the XChaCha20 stream
     * cipher and authenticated with a tag generated by the BLAKE2b hash function.
     * It addresses several security concerns with the original XChaCha20-Poly1305
     * construction, by using separate keys for encryption and authentication, as
     * well using Pre-Authentication Encoding (see the PASETO standard for details)
     * when generating the authentication tag. This is the most secure symmetric
     * algorithm available in the SaltLite framework at this time, but because it
     * is a relatively new construction, usage will be limited to communication
     * between SaltLite applications. Once libsodium 1.0.19 becomes the standard
     * version compiled with PHP, this will be replaced as the default symmetric
     * encryption algorithm by AEGIS-256.
     */
    #[AlgorithmImplementation(new XChaCha20Blake2b())]
    case XChaCha20Blake2b;

    /**
     * XChaCha20-Poly1305 (IETF Variant) is a AEAD construction based on the
     * ChaCha20 cipher with an extended 192-bit nonce. It was the preferred
     * symmetric AEAD algorithm prior to the introduction of the AEGIS-256
     * construction, though it might not be as well-supported cross-platform.
     * The algorithm is not key-committing.
     */
    #[AlgorithmImplementation(new XChaCha20Poly1305())]
    case XChaCha20Poly1305;

    /**
     * AES-256-GCM is a AEAD construction based on the AES-256 block cipher in
     * Galois/Counter Mode. It is a widely supported and secure symmetric encryption,
     * and when hardware-accelerated, can be very fast, though not as fast as
     * AEGIS-256. It's included in the SaltLite framework for compatibility with
     * external applications that use this algorithm.
     */
    #[AlgorithmImplementation(new Aes256Gcm())]
    case Aes256Gcm;

    /**
     * XSalsa20-Poly1305 is a non-AEAD construction, and is the algorithm used
     * by the `sodium_crypto_secretbox_*` functions.
     */
    #[AlgorithmImplementation(new XSalsa20Poly1305())]
    case XSalsa20Poly1305;

    public function implementation(): EncryptionAlgorithm
    {
        $implementation = CaseAttr::first($this, AlgorithmImplementation::class)->algorithm ?? null;
        \assert($implementation instanceof EncryptionAlgorithm);
        return $implementation;
    }
}
